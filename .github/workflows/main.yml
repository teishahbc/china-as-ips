name: Update China IPs

on:
  schedule:
    # Run daily at 00:05 UTC to allow time for source databases to potentially update
    - cron: '5 0 * * *'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual trigger'
  push:
    branches:
      - main
    paths:
      # Only trigger on push if relevant files change (e.g., script itself)
      # Avoid triggering from the push generated by this workflow itself if only china_ips.txt changes.
      - 'main.py'
      - '.github/workflows/main.yml'
      # DO NOT include country_asn.csv.gz or china_ips.txt here

jobs:
  update-ips:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need write permission to push changes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use latest checkout action
        # No need to fetch history if only updating based on external data
        with:
          fetch-depth: 1

      - name: Set up Python 3.9
        uses: actions/setup-python@v5 # Use latest setup-python action
        with:
          python-version: 3.9

      - name: Download IPinfo Database and Verify
        run: |
          echo "Ensuring workspace is clean before download..."
          # *** ADDED: Explicitly remove any existing database file ***
          # This guarantees we download a fresh copy, even if one was checked out.
          rm -f country_asn.csv.gz
          echo "Removed any existing country_asn.csv.gz. Proceeding with download..."

          echo "Starting download of IPinfo country_asn database..."
          # Use curl for better error handling and progress (optional)
          # -f: Fail silently (no output) on server errors (HTTP >= 400)
          # -s: Silent mode. Don't show progress meter or error messages.
          # -L: Follow redirects.
          # -o: Write output to <file> instead of stdout.
          curl -f -s -L "https://ipinfo.io/data/free/country_asn.csv.gz?token=${{ secrets.IPINFO_TOKEN }}" -o country_asn.csv.gz
          # Check curl's exit status ($?)
          if [ $? -ne 0 ]; then
            echo "::error::Download failed. Check token, network, or IPinfo service status."
            exit 1
          fi
          echo "Download command executed." # Changed from "Download complete" as size/integrity check is next

          # Verify File Size (Adjust MIN_SIZE based on typical file size)
          # Check if file exists before getting size
          if [ ! -f country_asn.csv.gz ]; then
             echo "::error::Download failed: country_asn.csv.gz not found after download attempt."
             exit 1
          fi
          FILE_SIZE=$(stat -c %s country_asn.csv.gz)
          # Set a reasonable minimum size (e.g., 5MB)
          MIN_SIZE=5000000
          echo "Downloaded file size: $FILE_SIZE bytes."
          if [ "$FILE_SIZE" -lt "$MIN_SIZE" ]; then
            echo "::error::Downloaded file is too small (size: $FILE_SIZE bytes, minimum expected: $MIN_SIZE bytes). Download may be incomplete or corrupt. Aborting."
            # Keep the small file for inspection in case of failure
            ls -l country_asn.csv.gz
            exit 1
          fi
          echo "File size check passed."

          # Verify it's a valid gzip file
          echo "Verifying gzip integrity..."
          if ! gzip -t country_asn.csv.gz; then
             # gzip -t outputs error messages to stderr, which Actions should capture
             echo "::error::Downloaded file is not a valid gzip file. Aborting."
             exit 1
          fi
          echo "Gzip integrity check passed. Download successful and verified."

      - name: Run IP Update Script
        run: python main.py

      - name: Commit and Push Changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Bot"

          # Check if the target file was actually modified by the python script
          # Use 'git status --porcelain' which is designed for scripting
          if [[ `git status --porcelain ${{ env.OUTPUT_FILE }}` ]]; then
            echo "Changes detected in ${{ env.OUTPUT_FILE }}. Committing..."
            git add ${{ env.OUTPUT_FILE }}
            # Use UTC date for consistency
            COMMIT_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            git commit -m "Update China IPs (${COMMIT_DATE})"
            # Add retry logic for push in case of temporary network issues or conflicts
            # Simple retry loop example:
            for i in 1 2 3; do
              git push origin main && break # Exit loop if push succeeds
              echo "Push attempt $i failed. Retrying in 10 seconds..."
              sleep 10
              # Optional: git pull --rebase before retrying if conflicts are expected,
              # but this can be complex if the script output changes frequently.
              # A simple retry is often sufficient for transient issues.
            done || echo "::error::Failed to push changes after multiple attempts." # Report error if all retries fail
          else
            echo "No changes detected in ${{ env.OUTPUT_FILE }}. No commit needed."
          fi
        env:
          OUTPUT_FILE: china_ips.txt # Make output file an env variable for consistency
